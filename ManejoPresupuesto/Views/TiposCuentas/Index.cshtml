
@model IEnumerable<TipoCuenta>


@{
 ViewData ["Title"] = "Tipos Cuentas"; 
}

<h1>Tipos Cuentas </h1>
<h5>El tipo de cuenta se refiere a cómo podemos agrupar cuentas.
	Ejemplo: préstamos, Tarjetas de credito, etc.
</h5>
<a asp-action="Crear" class="btn btn-primary m-3">Crear Nuevo</a>
<table class="table table-striped table-dark table-bordered bordered-secondary">
	<thead>
		<tr>
			<th class="text-white-120">Acción </th>
				<th class ="text-white-120">Nombre</th>
		</tr>
	</thead>
		<tbody id="reordenable">
			@foreach (var  tipoCuenta in  Model)
			{
				<tr class="table-Dark">
					<td>
						 <input type="hidden" value="@tipoCuenta.Id" class="ids"/> 
						<a class="btn btn-primary" asp-action="Editar" asp-route-id="@tipoCuenta.Id">Editar</a>
						<a class="btn btn-danger" asp-action="Borrar" asp-route-id="@tipoCuenta.Id">Borrar
						<i class="bi-trash-fill"></i>
						</a>
					</td>
					<td>
						@tipoCuenta.Nombre
					</td>
				</tr>
				
			}
		</tbody>
</table>
	


  @SectionWriters Scrips {
	<script>
		const urlOrdenar = '@Url.Action("Ordenar")';
		$(function(e, ui){
		$("#reordenable").sortable({
				stop: async function(e, ui){
				await actulizarOrdenes();}
	});
	 async function actualizarOrdenes(){
		const ids = obtenerIdsDeElementos();
		await enviarIdsAlBackend(ids) ; 
	}
		function obtenerIdsDeElementos(){
			const ids =$(".ids").map(function(){
				return $(this).val();
			}).get();
			return ids;
		}
		async function enviarIdsAlBackend(ids){
			 var Data  =JSON.stringify(ids);
			await fetch (urlOrdenar,{
				method:'POST',
				body: data,
				headers: {
					'Content-Type':'application/json'
				}
				});
		}) 
		}
		
	</script> 
}